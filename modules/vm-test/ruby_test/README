== Conventions

=== Directory Layout
   
   bench - toplevel directory for all benchmarks
   
   bench/core   - toplevel directory for benchmarks of core Ruby methods.
   bench/stdlib - toplevel directory for benchmarks of libraries in the stdlib.
   test/core    - toplevel directory for tests of core Ruby classes.
   test/stdlib  - toplevel directory for tests of stdlib.
   
   Under test/core there is a folder for each of the core classes.  Under
   those folders are one or two subdirectories - 'class' and/or 'instance'.
   
   Under the 'class' folders are the tests for the class methods of the class
   in question.  Under the 'instance' folders are the tests for the instance
   methods of the class in question, if applicable.
   
=== Test suites
   The test program shall be test/unit, by Nathaniel Talbott.
	
   All test files shall start with "tc_", and end with the name of the method,
   or an analogue based on the internal method name, e.g. "aref" to refer to
   Array#[].
   
   All test suites shall begin with "ts_", followed by the class name that
   they encompass, e.g. ts_array.rb.
   
   All test class names shall start with "TC_", followed by the class name,
   followed by the class or instance method (capitalized), followed by the word
   "Class", or "Instance", as appropriate.
   
   For example, TC_Dir_Getwd_Class < Test::Unit::TestCase
   
== Testing guidelines
   One test per method for the core classes.
   - Exception: bang and non-bang methods can be grouped together.
   Comment your tests as appropriate.
   Test basic functionality using most likely real world uses.
   Test for expected errors.
   Test edge cases (nil, 0, true, false).
   Go out of your way to break things. :)

== Benchmark suites
   The benchmark program shall be "benchmark", the library that comes bundled
   as part of the Ruby standard library.

   All benchmark programs shall start with "bench_", and end with the name of
   the class.  There shall be one benchmark program per class, although
   benchmark suites are also allowed per method, if desired. I have created
   a few method benchmarks in order to compare changes to the C source with
   original source code.

== Notes on the Benchmark suite
   The purpose of the benchmark suite is to determine overall speed, do speed
   comparisons between minor releases, high iteration testing, look for any
   pathological slowdowns, and find methods that can be optimized.
   
== Acknowledgements
   Some tests shamelessly plagiarized from rubicon or bfts.
